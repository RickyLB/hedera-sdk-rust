// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Native bindings to the C Hedera library
class NativeHedera {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeHedera(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeHedera.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Returns English-language text that describes the last error. Undefined if there has been
  /// no last error.
  ffi.Pointer<ffi.Int8> hedera_error_message() {
    return _hedera_error_message();
  }

  late final _hedera_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'hedera_error_message');
  late final _hedera_error_message =
      _hedera_error_messagePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  /// Returns the GRPC status code for the last error. Undefined if the last error was not
  /// `HEDERA_ERROR_GRPC_STATUS`.
  int hedera_error_grpc_status() {
    return _hedera_error_grpc_status();
  }

  late final _hedera_error_grpc_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'hedera_error_grpc_status');
  late final _hedera_error_grpc_status =
      _hedera_error_grpc_statusPtr.asFunction<int Function()>();

  /// Returns the hedera services response code for the last error. Undefined if the last error
  /// was not `HEDERA_ERROR_PRE_CHECK_STATUS`.
  int hedera_error_pre_check_status() {
    return _hedera_error_pre_check_status();
  }

  late final _hedera_error_pre_check_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'hedera_error_pre_check_status');
  late final _hedera_error_pre_check_status =
      _hedera_error_pre_check_statusPtr.asFunction<int Function()>();

  /// Parse a Hedera `AccountAddress` from the passed string.
  int hedera_account_address_from_string(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Uint64> id_shard,
    ffi.Pointer<ffi.Uint64> id_realm,
    ffi.Pointer<ffi.Uint64> id_num,
    ffi.Pointer<ffi.Pointer<HederaPublicKey>> id_alias,
  ) {
    return _hedera_account_address_from_string(
      s,
      id_shard,
      id_realm,
      id_num,
      id_alias,
    );
  }

  late final _hedera_account_address_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>>(
      'hedera_account_address_from_string');
  late final _hedera_account_address_from_string =
      _hedera_account_address_from_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>();

  /// Parse a Hedera `AccountAlias` from the passed string.
  int hedera_account_alias_from_string(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Uint64> id_shard,
    ffi.Pointer<ffi.Uint64> id_realm,
    ffi.Pointer<ffi.Pointer<HederaPublicKey>> id_alias,
  ) {
    return _hedera_account_alias_from_string(
      s,
      id_shard,
      id_realm,
      id_alias,
    );
  }

  late final _hedera_account_alias_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>>(
      'hedera_account_alias_from_string');
  late final _hedera_account_alias_from_string =
      _hedera_account_alias_from_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>();

  /// Construct a Hedera client pre-configured for testnet access.
  ffi.Pointer<HederaClient> hedera_client_for_testnet() {
    return _hedera_client_for_testnet();
  }

  late final _hedera_client_for_testnetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HederaClient> Function()>>(
          'hedera_client_for_testnet');
  late final _hedera_client_for_testnet = _hedera_client_for_testnetPtr
      .asFunction<ffi.Pointer<HederaClient> Function()>();

  /// Release memory associated with the previously-opened Hedera client.
  void hedera_client_free(
    ffi.Pointer<HederaClient> client,
  ) {
    return _hedera_client_free(
      client,
    );
  }

  late final _hedera_client_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HederaClient>)>>(
          'hedera_client_free');
  late final _hedera_client_free = _hedera_client_freePtr
      .asFunction<void Function(ffi.Pointer<HederaClient>)>();

  /// Sets the account that will, by default, be paying for transactions and queries built with
  /// this client.
  void hedera_client_set_payer_account_id(
    ffi.Pointer<HederaClient> client,
    int id_shard,
    int id_realm,
    int id_num,
  ) {
    return _hedera_client_set_payer_account_id(
      client,
      id_shard,
      id_realm,
      id_num,
    );
  }

  late final _hedera_client_set_payer_account_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<HederaClient>, ffi.Uint64, ffi.Uint64,
              ffi.Uint64)>>('hedera_client_set_payer_account_id');
  late final _hedera_client_set_payer_account_id =
      _hedera_client_set_payer_account_idPtr.asFunction<
          void Function(ffi.Pointer<HederaClient>, int, int, int)>();

  /// Gets the account that is, by default, paying for transactions and queries built with
  /// this client.
  void hedera_client_get_payer_account_id(
    ffi.Pointer<HederaClient> client,
    ffi.Pointer<ffi.Uint64> id_shard,
    ffi.Pointer<ffi.Uint64> id_realm,
    ffi.Pointer<ffi.Uint64> id_num,
  ) {
    return _hedera_client_get_payer_account_id(
      client,
      id_shard,
      id_realm,
      id_num,
    );
  }

  late final _hedera_client_get_payer_account_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<HederaClient>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('hedera_client_get_payer_account_id');
  late final _hedera_client_get_payer_account_id =
      _hedera_client_get_payer_account_idPtr.asFunction<
          void Function(ffi.Pointer<HederaClient>, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>)>();

  /// Adds a signer that will, by default, sign for all transactions and queries built
  /// with this client.
  ///
  /// Takes ownership of the passed signer.
  void hedera_client_add_default_signer(
    ffi.Pointer<HederaClient> client,
    ffi.Pointer<HederaSigner> signer,
  ) {
    return _hedera_client_add_default_signer(
      client,
      signer,
    );
  }

  late final _hedera_client_add_default_signerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<HederaClient>,
              ffi.Pointer<HederaSigner>)>>('hedera_client_add_default_signer');
  late final _hedera_client_add_default_signer =
      _hedera_client_add_default_signerPtr.asFunction<
          void Function(
              ffi.Pointer<HederaClient>, ffi.Pointer<HederaSigner>)>();

  /// Parse a Hedera `EntityId` from the passed string.
  int hedera_entity_id_from_string(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Uint64> id_shard,
    ffi.Pointer<ffi.Uint64> id_realm,
    ffi.Pointer<ffi.Uint64> id_num,
  ) {
    return _hedera_entity_id_from_string(
      s,
      id_shard,
      id_realm,
      id_num,
    );
  }

  late final _hedera_entity_id_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('hedera_entity_id_from_string');
  late final _hedera_entity_id_from_string =
      _hedera_entity_id_from_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>)>();

  /// Execute this request against the provided client of the Hedera network.
  int hedera_execute(
    ffi.Pointer<HederaClient> client,
    ffi.Pointer<ffi.Int8> request,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Pointer<ffi.Int8>)>>
        callback,
  ) {
    return _hedera_execute(
      client,
      request,
      context,
      callback,
    );
  }

  late final _hedera_executePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<HederaClient>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<ffi.Int8>)>>)>>('hedera_execute');
  late final _hedera_execute = _hedera_executePtr.asFunction<
      int Function(
          ffi.Pointer<HederaClient>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Int8>)>>)>();

  /// Generates a new Ed25519 private key.
  ffi.Pointer<HederaPrivateKey> hedera_private_key_generate_ed25519() {
    return _hedera_private_key_generate_ed25519();
  }

  late final _hedera_private_key_generate_ed25519Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HederaPrivateKey> Function()>>(
          'hedera_private_key_generate_ed25519');
  late final _hedera_private_key_generate_ed25519 =
      _hedera_private_key_generate_ed25519Ptr
          .asFunction<ffi.Pointer<HederaPrivateKey> Function()>();

  /// Generates a new ECDSA(secp256k1) private key.
  ffi.Pointer<HederaPrivateKey> hedera_private_key_generate_ecdsa_secp256k1() {
    return _hedera_private_key_generate_ecdsa_secp256k1();
  }

  late final _hedera_private_key_generate_ecdsa_secp256k1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HederaPrivateKey> Function()>>(
          'hedera_private_key_generate_ecdsa_secp256k1');
  late final _hedera_private_key_generate_ecdsa_secp256k1 =
      _hedera_private_key_generate_ecdsa_secp256k1Ptr
          .asFunction<ffi.Pointer<HederaPrivateKey> Function()>();

  /// Gets the public key which corresponds to this private key.
  ffi.Pointer<HederaPublicKey> hedera_private_key_get_public_key(
    ffi.Pointer<HederaPrivateKey> key,
  ) {
    return _hedera_private_key_get_public_key(
      key,
    );
  }

  late final _hedera_private_key_get_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<HederaPublicKey> Function(
                  ffi.Pointer<HederaPrivateKey>)>>(
      'hedera_private_key_get_public_key');
  late final _hedera_private_key_get_public_key =
      _hedera_private_key_get_public_keyPtr.asFunction<
          ffi.Pointer<HederaPublicKey> Function(
              ffi.Pointer<HederaPrivateKey>)>();

  /// Parse a Hedera private key from the passed string.
  int hedera_private_key_from_string(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Pointer<HederaPrivateKey>> key,
  ) {
    return _hedera_private_key_from_string(
      s,
      key,
    );
  }

  late final _hedera_private_key_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<HederaPrivateKey>>)>>(
      'hedera_private_key_from_string');
  late final _hedera_private_key_from_string =
      _hedera_private_key_from_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<HederaPrivateKey>>)>();

  /// Format a Hedera private key as a string.
  ffi.Pointer<ffi.Int8> hedera_private_key_to_string(
    ffi.Pointer<HederaPrivateKey> key,
  ) {
    return _hedera_private_key_to_string(
      key,
    );
  }

  late final _hedera_private_key_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<HederaPrivateKey>)>>('hedera_private_key_to_string');
  late final _hedera_private_key_to_string =
      _hedera_private_key_to_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<HederaPrivateKey>)>();

  /// Releases memory associated with the private key.
  void hedera_private_key_free(
    ffi.Pointer<HederaPrivateKey> key,
  ) {
    return _hedera_private_key_free(
      key,
    );
  }

  late final _hedera_private_key_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HederaPrivateKey>)>>(
      'hedera_private_key_free');
  late final _hedera_private_key_free = _hedera_private_key_freePtr
      .asFunction<void Function(ffi.Pointer<HederaPrivateKey>)>();

  /// Parse a Hedera public key from the passed string.
  int hedera_public_key_from_string(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Pointer<HederaPublicKey>> key,
  ) {
    return _hedera_public_key_from_string(
      s,
      key,
    );
  }

  late final _hedera_public_key_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>>(
      'hedera_public_key_from_string');
  late final _hedera_public_key_from_string =
      _hedera_public_key_from_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<HederaPublicKey>>)>();

  /// Format a Hedera public key as a string.
  ffi.Pointer<ffi.Int8> hedera_public_key_to_string(
    ffi.Pointer<HederaPublicKey> key,
  ) {
    return _hedera_public_key_to_string(
      key,
    );
  }

  late final _hedera_public_key_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<HederaPublicKey>)>>('hedera_public_key_to_string');
  late final _hedera_public_key_to_string =
      _hedera_public_key_to_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<HederaPublicKey>)>();

  /// Releases memory associated with the public key.
  void hedera_public_key_free(
    ffi.Pointer<HederaPublicKey> key,
  ) {
    return _hedera_public_key_free(
      key,
    );
  }

  late final _hedera_public_key_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HederaPublicKey>)>>(
      'hedera_public_key_free');
  late final _hedera_public_key_free = _hedera_public_key_freePtr
      .asFunction<void Function(ffi.Pointer<HederaPublicKey>)>();

  /// Create an opaque signer from a `HederaPrivateKey`.
  ffi.Pointer<HederaSigner> hedera_signer_private_key(
    ffi.Pointer<HederaPrivateKey> key,
  ) {
    return _hedera_signer_private_key(
      key,
    );
  }

  late final _hedera_signer_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HederaSigner> Function(
              ffi.Pointer<HederaPrivateKey>)>>('hedera_signer_private_key');
  late final _hedera_signer_private_key =
      _hedera_signer_private_keyPtr.asFunction<
          ffi.Pointer<HederaSigner> Function(ffi.Pointer<HederaPrivateKey>)>();

  /// Subscribe with this request against the provided client of the Hedera network.
  /// On successful completion, calls `callback` with `ERROR_OK` and a `NULL` `message`.
  int hedera_subscribe(
    ffi.Pointer<HederaClient> client,
    ffi.Pointer<ffi.Int8> request,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Pointer<ffi.Int8>)>>
        callback,
  ) {
    return _hedera_subscribe(
      client,
      request,
      context,
      callback,
    );
  }

  late final _hedera_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<HederaClient>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<ffi.Int8>)>>)>>('hedera_subscribe');
  late final _hedera_subscribe = _hedera_subscribePtr.asFunction<
      int Function(
          ffi.Pointer<HederaClient>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Int8>)>>)>();
}

/// Represents any possible result from a fallible function in the Hedera SDK.
abstract class HederaError {
  static const int HEDERA_ERROR_OK = 0;
  static const int HEDERA_ERROR_TIMED_OUT = 1;
  static const int HEDERA_ERROR_GRPC_STATUS = 2;
  static const int HEDERA_ERROR_FROM_PROTOBUF = 3;
  static const int HEDERA_ERROR_TRANSACTION_PRE_CHECK_STATUS = 4;
  static const int HEDERA_ERROR_TRANSACTION_NO_ID_PRE_CHECK_STATUS = 5;
  static const int HEDERA_ERROR_QUERY_PRE_CHECK_STATUS = 6;
  static const int HEDERA_ERROR_QUERY_PAYMENT_PRE_CHECK_STATUS = 7;
  static const int HEDERA_ERROR_QUERY_NO_PAYMENT_PRE_CHECK_STATUS = 8;
  static const int HEDERA_ERROR_BASIC_PARSE = 9;
  static const int HEDERA_ERROR_KEY_PARSE = 10;
  static const int HEDERA_ERROR_NO_PAYER_ACCOUNT_OR_TRANSACTION_ID = 11;
  static const int HEDERA_ERROR_MAX_QUERY_PAYMENT_EXCEEDED = 12;
  static const int HEDERA_ERROR_NODE_ACCOUNT_UNKNOWN = 13;
  static const int HEDERA_ERROR_RESPONSE_STATUS_UNRECOGNIZED = 14;
  static const int HEDERA_ERROR_RECEIPT_STATUS = 15;
  static const int HEDERA_ERROR_SIGNATURE = 16;
  static const int HEDERA_ERROR_REQUEST_PARSE = 17;
}

class HederaClient extends ffi.Opaque {}

class HederaPrivateKey extends ffi.Opaque {}

class HederaPublicKey extends ffi.Opaque {}

class HederaSigner extends ffi.Opaque {}
